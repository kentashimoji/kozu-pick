# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1btnoqWxUC39hcMYKlI8PUSb1RQfJjC14
"""

"""
小字データ抽出ページ
"""

import streamlit as st
import pandas as pd
from src.gis_handler import GISHandler

class KozuPage:
    def __init__(self, app):
        self.app = app
        self.gis_handler = GISHandler()

    def render(self):
        """小字データ抽出ページを描画"""
        st.title("🗺️ 小字データ抽出ツール")

        if not self.gis_handler.is_gis_available():
            st.error("⚠️ GIS機能が利用できません。GeoPandasをインストールしてください。")
            return

        # ファイル読み込みセクション
        self._render_file_section()

        # GISデータが読み込まれている場合
        if st.session_state.get('gdf') is not None:
            self._render_extraction_section()

    def _render_file_section(self):
        """ファイル読み込みセクション"""
        st.header("📁 GISファイル読み込み")

        # タブで読み込み方法を選択
        tab1, tab2, tab3 = st.tabs(["📂 フォルダから検索", "🔗 直接URL", "📤 ファイルアップロード"])

        with tab1:
            self._render_folder_search()

        with tab2:
            self._render_url_input()

        with tab3:
            self._render_file_upload()

    def _render_folder_search(self):
        """フォルダ検索タブ"""
        st.subheader("GitHubフォルダから検索")

        folder_url = st.text_input(
            "GitHubフォルダURL:",
            placeholder="https://github.com/username/repository/tree/main/data",
            help="GitHubのフォルダURLを入力してください"
        )

        if st.button("🔍 ファイルを検索"):
            if folder_url:
                with st.spinner("ファイルを検索しています..."):
                    files = self.gis_handler.get_files_from_web_folder(folder_url, ['.zip', '.shp'])

                    if files:
                        st.success(f"✅ {len(files)}個のファイルが見つかりました")

                        # ファイル選択
                        file_options = {f"{f['name']} ({f['size']} bytes)": f['url'] for f in files}
                        selected_file = st.selectbox("ファイルを選択:", ["選択してください"] + list(file_options.keys()))

                        if selected_file != "選択してください":
                            if st.button("📥 選択ファイルを読み込み"):
                                file_url = file_options[selected_file]
                                self._load_gis_data(file_url)
                    else:
                        st.warning("⚠️ 対応するファイルが見つかりませんでした")

    def _render_url_input(self):
        """URL入力タブ"""
        st.subheader("直接URL指定")

        file_url = st.text_input(
            "GISファイルURL:",
            placeholder="https://example.com/data.zip",
            help="ZIPファイル、Shapefile、KMLファイルのURLを入力してください"
        )

        if st.button("📥 URLから読み込み"):
            if file_url:
                self._load_gis_data(file_url)

    def _render_file_upload(self):
        """ファイルアップロードタブ"""
        st.subheader("ファイルアップロード")

        uploaded_file = st.file_uploader(
            "GISファイルを選択してください",
            type=['zip', 'shp', 'kml', 'geojson'],
            help="ZIP、Shapefile、KML、GeoJSONファイルをアップロードできます"
        )

        if uploaded_file is not None:
            if st.button("📥 アップロードファイルを読み込み"):
                # 一時ファイルに保存して読み込み
                import tempfile
                with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                    tmp_file.write(uploaded_file.read())
                    tmp_path = tmp_file.name

                self._load_gis_data(tmp_path)

    def _load_gis_data(self, file_path_or_url):
        """GISデータを読み込み"""
        try:
            with st.spinner("GISファイルを読み込んでいます..."):
                gdf = self.gis_handler.load_gis_data(file_path_or_url)

                if gdf is not None:
                    st.session_state.gdf = gdf
                    st.success(f"✅ GISデータを読み込みました（{len(gdf)}件のデータ）")

                    # データ概要を表示
                    st.subheader("📊 データ概要")
                    col1, col2, col3 = st.columns(3)

                    with col1:
                        st.metric("レコード数", len(gdf))

                    with col2:
                        st.metric("列数", len(gdf.columns))

                    with col3:
                        crs_info = str(gdf.crs) if gdf.crs else "不明"
                        st.metric("投影法", crs_info[:10] + "..." if len(crs_info) > 10 else crs_info)

                    # 列情報
                    st.write("**利用可能な列:**")
                    st.write(list(gdf.columns))

                    # サンプルデータ
                    with st.expander("サンプルデータを表示"):
                        st.dataframe(gdf.head())

        except Exception as e:
            st.error(f"ファイル読み込みエラー: {str(e)}")

    def _render_extraction_section(self):
        """データ抽出セクション"""
        st.markdown("---")
        st.header("🎯 データ抽出")

        gdf = st.session_state.gdf

        # 必要な列の存在確認
        required_columns = ['大字名', '地番']
        missing_columns = [col for col in required_columns if col not in gdf.columns]

        if missing_columns:
            st.error(f"必要な列が見つかりません: {missing_columns}")
            st.info("必要な列: 大字名, 地番")
            return

        # 抽出条件入力
        col1, col2 = st.columns(2)

        with col1:
            # 大字選択
            oaza_options = sorted(gdf['大字名'].dropna().unique())
            selected_oaza = st.selectbox("大字名:", ["選択してください"] + oaza_options)

            # 小字選択（大字が選択されている場合）
            selected_koaza = None
            if selected_oaza != "選択してください":
                koaza_options = self.gis_handler.get_koaza_options(gdf, selected_oaza)
                if koaza_options:
                    selected_koaza = st.selectbox("小字名:", ["選択なし"] + koaza_options)

        with col2:
            # 丁目選択（大字が選択されている場合）
            selected_chome = None
            if selected_oaza != "選択してください":
                chome_options = self.gis_handler.get_chome_options(gdf, selected_oaza)
                if chome_options:
                    selected_chome = st.selectbox("丁目名:", ["選択なし"] + chome_options)

            # 地番入力
            chiban = st.text_input("地番:", placeholder="例: 123")

            # 検索範囲
            range_m = st.number_input("検索範囲（メートル）:", min_value=10, max_value=1000, value=100, step=10)

        # 抽出実行
        if st.button("🎯 データを抽出", type="primary"):
            if selected_oaza == "選択してください":
                st.error("大字名を選択してください")
            elif not chiban:
                st.error("地番を入力してください")
            else:
                self._execute_extraction(selected_oaza, selected_chome, selected_koaza, chiban, range_m)

    def _execute_extraction(self, oaza, chome, koaza, chiban, range_m):
        """データ抽出を実行"""
        gdf = st.session_state.gdf

        with st.spinner("データを抽出しています..."):
            df_summary, overlay_gdf, message = self.gis_handler.extract_kozu_data(
                gdf, oaza, chome, koaza, chiban, range_m
            )

            if df_summary is not None and overlay_gdf is not None:
                st.success(f"✅ 抽出完了: {message}")

                # 結果を表示
                self._display_extraction_results(df_summary, overlay_gdf, oaza, chome, koaza, chiban)
            else:
                st.error(f"❌ 抽出失敗: {message}")

    def _display_extraction_results(self, df_summary, overlay_gdf, oaza, chome, koaza, chiban):
        """抽出結果を表示"""
        st.markdown("---")
        st.header("📊 抽出結果")

        # 抽出条件の表示
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("🎯 抽出条件")
            st.write(f"**大字名:** {oaza}")
            if chome and chome != "選択なし":
                st.write(f"**丁目名:** {chome}")
            if koaza and koaza != "選択なし":
                st.write(f"**小字名:** {koaza}")
            st.write(f"**地番:** {chiban}")

        with col2:
            st.subheader("📈 結果統計")
            st.metric("対象筆数", len(df_summary))
            st.metric("周辺筆数", len(overlay_gdf))

        # タブで結果を表示
        tab1, tab2, tab3 = st.tabs(["🎯 対象筆", "🗺️ 周辺筆", "📥 ダウンロード"])

        with tab1:
            st.subheader("対象筆データ")
            if not df_summary.empty:
                st.dataframe(df_summary)

                # 対象筆の詳細情報
                if len(df_summary) == 1:
                    st.info("✅ 対象筆が1件特定されました")
                else:
                    st.warning(f"⚠️ 対象筆が{len(df_summary)}件見つかりました。条件を絞り込んでください。")
            else:
                st.info("対象筆が見つかりませんでした")

        with tab2:
            st.subheader("周辺筆データ")
            if not overlay_gdf.empty:
                st.dataframe(overlay_gdf)

                # 周辺筆の統計
                if '大字名' in overlay_gdf.columns:
                    oaza_counts = overlay_gdf['大字名'].value_counts()
                    st.write("**大字別件数:**")
                    st.bar_chart(oaza_counts)
            else:
                st.info("周辺筆が見つかりませんでした")

        with tab3:
            st.subheader("データダウンロード")

            col1, col2 = st.columns(2)

            with col1:
                if not df_summary.empty:
                    # 対象筆をCSV形式でダウンロード
                    csv_data = df_summary.to_csv(index=False, encoding='utf-8-sig')
                    st.download_button(
                        label="📥 対象筆データ (CSV)",
                        data=csv_data,
                        file_name=f"target_lots_{oaza}_{chiban}.csv",
                        mime="text/csv"
                    )

            with col2:
                if not overlay_gdf.empty:
                    # 周辺筆をCSV形式でダウンロード
                    csv_data = overlay_gdf.to_csv(index=False, encoding='utf-8-sig')
                    st.download_button(
                        label="📥 周辺筆データ (CSV)",
                        data=csv_data,
                        file_name=f"surrounding_lots_{oaza}_{chiban}.csv",
                        mime="text/csv"
                    )

        # 結果をセッション状態に保存
        st.session_state.extraction_results = {
            'target': df_summary,
            'surrounding': overlay_gdf,
            'conditions': {'oaza': oaza, 'chome': chome, 'koaza': koaza, 'chiban': chiban}
        }