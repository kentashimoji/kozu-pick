# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TBC-SKKNm03PJIe45Bwr-EUiC-DZ-wdw
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
src/shp_manager.py
shpファイルの検索・特定・管理専用クラス
"""

import streamlit as st
import os
import re
from typing import List, Dict, Any

class ShapefileManager:
    """shpファイル管理クラス"""

    def __init__(self, github_api):
        self.github_api = github_api

    def search_shp_files(self, address_info: Dict[str, str]) -> List[Dict[str, Any]]:
        """住所情報に基づいてshpファイルを検索"""
        try:
            patterns = ShapefilePatternGenerator().generate_patterns(address_info)

            found_files = []
            for pattern in patterns:
                files = self._search_by_pattern(pattern)
                found_files.extend(files)

            return ShapefileRanker().rank_files(found_files, address_info)

        except Exception as e:
            st.error(f"shpファイル検索エラー: {str(e)}")
            return []

    def _search_by_pattern(self, pattern: str) -> List[Dict[str, Any]]:
        """パターンに基づいてファイルを検索"""
        # 実装は既存のファイル検索ロジックを使用
        return []

class ShapefilePatternGenerator:
    """shpファイルのパターン生成クラス"""

    def generate_patterns(self, address_info: Dict[str, str]) -> List[str]:
        """住所情報からファイル名パターンを生成"""
        patterns = []

        search_code = address_info.get('検索コード', '')
        oaza = address_info.get('大字', '')
        chome = address_info.get('丁目', '')
        chiban = address_info.get('地番', '')

        # 詳細パターン
        if all([search_code, oaza, chiban]):
            if chome and chome != "なし":
                patterns.append(f"{search_code}_{oaza}_{chome}_{chiban}")
            patterns.append(f"{search_code}_{oaza}_{chiban}")

        # 大字・丁目パターン
        if search_code and oaza:
            if chome and chome != "なし":
                patterns.append(f"{search_code}_{oaza}_{chome}")
            patterns.append(f"{search_code}_{oaza}")

        # 基本パターン
        if search_code:
            patterns.extend([
                f"{search_code}_地籍",
                f"{search_code}",
                f"cadastral_{search_code}",
                f"parcel_{search_code}"
            ])

        return patterns

class ShapefileRanker:
    """shpファイルの優先度ランキングクラス"""

    def rank_files(self, files: List[Dict[str, Any]], address_info: Dict[str, str]) -> List[Dict[str, Any]]:
        """ファイルを優先度順にランキング"""
        def calculate_score(file_info):
            score = 0
            file_name = file_info.get('name', '')

            # 地番一致
            chiban = address_info.get('地番', '')
            if chiban and chiban in file_name:
                score += 100

            # 丁目一致
            chome = address_info.get('丁目', '')
            if chome and chome != "なし" and chome in file_name:
                score += 50

            # 大字一致
            oaza = address_info.get('大字', '')
            if oaza and oaza in file_name:
                score += 30

            # ファイルサイズ適正
            size = file_info.get('size', 0)
            if 1000 < size < 10000000:  # 1KB - 10MB
                score += 10

            return score

        return sorted(files, key=calculate_score, reverse=True)