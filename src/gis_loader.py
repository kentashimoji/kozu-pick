# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TBC-SKKNm03PJIe45Bwr-EUiC-DZ-wdw
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
src/gis_loader.py
GISファイルの自動読み込み専用クラス
"""

import streamlit as st
import requests
from config.settings import GIS_CONFIG
from src.file_processors import FileProcessor

class GISAutoLoader:
    """GISファイル自動読み込みクラス"""

    def __init__(self, github_api):
        self.github_api = github_api
        self.file_processor = FileProcessor()

    def auto_load_by_code(self, prefecture_code: str, city_code: str) -> bool:
        """5桁コードでGISファイルを自動読み込み"""
        search_code = f"{prefecture_code}{city_code}"

        # 既に読み込み済みかチェック
        if self._is_already_loaded(search_code):
            return True

        # ファイル検索
        found_files = self._search_files(search_code)

        if not found_files:
            self._clear_gis_data()
            return False

        # 最優先ファイルを読み込み
        return self._load_priority_file(found_files[0], search_code)
        
        def auto_load_by_code(self, prefecture_code: str, city_code: str) -> bool:
            """5桁コードでGISファイルを自動読み込み"""
            search_code = f"{prefecture_code}{city_code}"
    
            st.write(f"🔍 GISローダー開始: {search_code}")

            # 既に読み込み済みかチェック
            if self._is_already_loaded(search_code):
                st.write("✅ 既に読み込み済み")
                return True

            # ファイル検索
            st.write("📂 ファイル検索開始...")
            found_files = self._search_files(search_code)
            st.write(f"📄 検索結果: {len(found_files)}個のファイル")
    
            # 見つかったファイルの詳細表示
            for i, file_info in enumerate(found_files):
                st.write(f"  ファイル{i+1}: {file_info.get('name', 'Unknown')}")

            if not found_files:
                st.warning("⚠️ 一致するファイルが見つかりませんでした")
                self._clear_gis_data()
                return False

            # 最優先ファイルを読み込み
            st.write(f"📥 優先ファイル読み込み: {found_files[0].get('name', 'Unknown')}")
            result = self._load_priority_file(found_files[0], search_code)
            st.write(f"📊 ファイル読み込み結果: {result}")
    
            return result

    def _is_already_loaded(self, search_code: str) -> bool:
        """既に読み込み済みかチェック"""
        current_code = st.session_state.get('current_gis_code', '')
        return current_code == search_code

    def _search_files(self, search_code: str) -> list:
        """ファイルを検索"""
        gis_folder = GIS_CONFIG.get('default_gis_folder', '')
        if not gis_folder:
            return []

        return GISFileSearcher(self.github_api).search(gis_folder, search_code)
        
        def _search_files(self, search_code: str) -> list:
            """ファイルを検索"""
            gis_folder = GIS_CONFIG.get('default_gis_folder', '')
            st.write(f"🔍 検索フォルダ: {gis_folder}")
    
            if not gis_folder:
                st.error("❌ GISフォルダが設定されていません")
                return []

            searcher = GISFileSearcher(self.github_api)
            found_files = searcher.search(gis_folder, search_code)
            st.write(f"📄 検索結果: {len(found_files)}個")
    
            return found_files

    def _load_priority_file(self, file_info: dict, search_code: str) -> bool:
        """優先ファイルを読み込み"""
        try:
            # ファイルダウンロード
            response = requests.get(
                file_info['download_url'],
                headers=self.github_api.headers,
                timeout=30
            )
            response.raise_for_status()

            # ファイル処理
            success = self.file_processor.process_file(
                response.content,
                file_info['name'],
                file_info['extension']
            )

            if success:
                st.session_state.current_gis_code = search_code
                st.session_state.selected_file_path = file_info['name']
                return True

            return False

        except Exception as e:
            st.error(f"ファイル読み込みエラー: {str(e)}")
            return False

    def _clear_gis_data(self):
        """GISデータをクリア"""
        st.session_state.area_data = {}
        st.session_state.selected_oaza = ""
        st.session_state.selected_chome = ""
        st.session_state.selected_file_path = ""

class GISFileSearcher:
    """GISファイル検索専用クラス"""

    def __init__(self, github_api):
        self.github_api = github_api

    def search(self, folder_url: str, search_code: str) -> list:
        """フォルダからファイルを検索"""
        try:
            api_url = self.github_api._convert_folder_url_to_api(folder_url)
            response = requests.get(api_url, headers=self.github_api.headers, timeout=30)

            if response.status_code != 200:
                return []

            files_data = response.json()
            return self._filter_matching_files(files_data, search_code)

        except Exception as e:
            st.error(f"ファイル検索エラー: {str(e)}")
            return []

    def _filter_matching_files(self, files_data: list, search_code: str) -> list:
        """マッチするファイルをフィルタリング"""
        gis_extensions = GIS_CONFIG.get('supported_extensions', [])
        found_files = []

        for file_info in files_data:
            if file_info['type'] == 'file':
                file_name = file_info['name']
                file_ext = '.' + file_name.lower().split('.')[-1] if '.' in file_name else ''

                if search_code in file_name and file_ext in gis_extensions:
                    found_files.append({
                        'name': file_name,
                        'download_url': file_info['download_url'],
                        'size': file_info.get('size', 0),
                        'extension': file_ext
                    })

        # 優先度順にソート
        priority_order = {'.zip': 1, '.csv': 2, '.xlsx': 2, '.xls': 2, '.shp': 3, '.kml': 4}
        return sorted(found_files, key=lambda x: priority_order.get(x['extension'], 99))

    def _search_files(self, search_code: str) -> list:
        """ファイルを検索"""
        gis_folder = GIS_CONFIG.get('default_gis_folder', '')
        st.write(f"🔍 フォルダURL: {gis_folder}")
    
        if not gis_folder:
            st.error("❌ GISフォルダが設定されていません")
            return []

        searcher = GISFileSearcher(self.github_api)
        found_files = searcher.search(gis_folder, search_code)
        st.write(f"📄 見つかったファイル数: {len(found_files)}")
    
        return found_files
        
    def search(self, folder_url: str, search_code: str) -> list:
        """フォルダからファイルを検索"""
        try:
            st.write(f"🌐 API URL: {folder_url}")
        
            # APIリクエスト実行
            response = requests.get(folder_url, headers=self.github_api.headers, timeout=30)
            st.write(f"📡 API応答コード: {response.status_code}")

            if response.status_code != 200:
                st.error(f"❌ API応答エラー: {response.status_code}")
                st.error(f"エラー内容: {response.text[:200]}...")
                return []

            files_data = response.json()
            st.write(f"📂 フォルダ内ファイル総数: {len(files_data)}")
        
            # ファイル名一覧を表示（最初の5個まで）
            for i, file_info in enumerate(files_data[:5]):
                if file_info['type'] == 'file':
                    st.write(f"  📄 {file_info['name']}")
        
            if len(files_data) > 5:
                st.write(f"  ... 他{len(files_data)-5}個のファイル")

            filtered_files = self._filter_matching_files(files_data, search_code)
            st.write(f"🎯 条件一致ファイル: {len(filtered_files)}個")
        
            return filtered_files

        except Exception as e:
            st.error(f"ファイル検索エラー: {str(e)}")
            return []
